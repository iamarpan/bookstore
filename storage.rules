rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    function getBookOwnerId(bookId) {
      return firestore.get(/databases/(default)/documents/books/$(bookId)).data.ownerId;
    }
    
    // Book cover images
    match /book_covers/{bookId}/{imageFile} {
      // Anyone can read book covers (for browsing)
      allow read: if true;
      
      // Only book owner can upload/update book covers
      allow write: if isAuthenticated() &&
                      isValidImageFile() &&
                      getUserId() == getBookOwnerId(bookId);
      
      // Only book owner can delete book covers
      allow delete: if isAuthenticated() &&
                       getUserId() == getBookOwnerId(bookId);
    }
    
    // Alternative path for book covers (direct bookId as filename)
    match /book_covers/{bookId} {
      allow read: if true;
      allow write: if isAuthenticated() &&
                      isValidImageFile() &&
                      getUserId() == getBookOwnerId(bookId);
      allow delete: if isAuthenticated() &&
                       getUserId() == getBookOwnerId(bookId);
    }
    
    // Profile images
    match /profile_images/{userId} {
      // Users can read any profile image (for social features)
      allow read: if isAuthenticated();
      
      // Users can only upload/update their own profile image
      allow write: if isAuthenticated() &&
                      isValidImageFile() &&
                      getUserId() == userId;
      
      // Users can only delete their own profile image
      allow delete: if isAuthenticated() &&
                       getUserId() == userId;
    }
    
    // Profile images with file extensions
    match /profile_images/{userId}/{imageFile} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() &&
                      isValidImageFile() &&
                      getUserId() == userId;
      allow delete: if isAuthenticated() &&
                       getUserId() == userId;
    }
    
    // Temporary uploads folder (for processing)
    match /temp/{userId}/{allPaths=**} {
      // Users can only access their own temp folder
      allow read, write, delete: if isAuthenticated() &&
                                    getUserId() == userId;
      
      // Auto-delete temp files older than 1 day (handled by cloud function)
    }
    
    // Deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 