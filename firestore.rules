rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isDevelopmentMode() {
      // In emulator mode, allow more permissive access
      // This will be true when running Firebase emulators
      return true; // For development - set to false in production
    }
    
    function getUserId() {
      return request.auth != null ? request.auth.uid : 'mock-user';
    }
    
    function getUserSocietyId(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.societyId;
    }
    
    function isOwner(userId) {
      return getUserId() == userId;
    }
    
    function isSameSociety(societyId) {
      return isDevelopmentMode() || getUserSocietyId(getUserId()) == societyId;
    }
    
    function isValidBookData(data) {
      return data.keys().hasAll(['title', 'author', 'genre', 'description', 'ownerId', 'societyId']) &&
             data.title is string && data.title.size() > 0 &&
             data.author is string && data.author.size() > 0 &&
             data.genre is string && data.genre.size() > 0 &&
             data.ownerId is string && data.ownerId.size() > 0 &&
             data.societyId is string && data.societyId.size() > 0 &&
             data.isAvailable is bool;
    }
    
    function isValidRequestStatus(status) {
      return status in ['pending', 'approved', 'rejected', 'returned', 'overdue'];
    }
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      // Allow development mode OR authenticated user access
      allow read, write: if isDevelopmentMode() || (isAuthenticated() && isOwner(userId));
      
      // Allow reading basic user info for society members
      allow read: if isDevelopmentMode() || (isAuthenticated() && 
                     isSameSociety(resource.data.societyId));
    }
    
    // Books collection - society-based access control
    match /books/{bookId} {
      // Anyone in the society can read available books
      allow read: if isDevelopmentMode() || (isAuthenticated() && 
                     isSameSociety(resource.data.societyId));
      
      // Only book owner can create, update, or delete their books
      allow create: if isDevelopmentMode() || (isAuthenticated() &&
                       getUserId() == request.resource.data.ownerId &&
                       isSameSociety(request.resource.data.societyId) &&
                       isValidBookData(request.resource.data));
      
      allow update: if isDevelopmentMode() || (isAuthenticated() &&
                       getUserId() == resource.data.ownerId);
      
      allow delete: if isDevelopmentMode() || (isAuthenticated() &&
                       getUserId() == resource.data.ownerId);
    }
    
    // Book requests collection
    match /bookRequests/{requestId} {
      // Borrowers can read their own requests, owners can read requests for their books
      allow read: if isDevelopmentMode() || (isAuthenticated() && 
                     (getUserId() == resource.data.borrowerId || 
                      getUserId() == resource.data.ownerId));
      
      // Only borrowers can create requests for themselves
      allow create: if isDevelopmentMode() || (isAuthenticated() &&
                       getUserId() == request.resource.data.borrowerId &&
                       isSameSociety(request.resource.data.societyId));
      
      // Only book owners can update request status
      allow update: if isDevelopmentMode() || (isAuthenticated() &&
                       getUserId() == resource.data.ownerId &&
                       // Ensure only specific fields can be updated
                       (request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['status', 'responseDate', 'dueDate', 'returnDate', 'notes'])) &&
                       // Validate status values
                       isValidRequestStatus(request.resource.data.status));
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Users can only read and update their own notifications
      allow read, update: if isDevelopmentMode() || (isAuthenticated() &&
                             getUserId() == resource.data.userId);
      
      // In development mode, allow creating notifications for testing
      allow create: if isDevelopmentMode();
      allow delete: if isDevelopmentMode();
    }
    
    // Societies collection - read-only for users
    match /societies/{societyId} {
      // All authenticated users can read society information
      allow read: if isDevelopmentMode() || isAuthenticated();
      
      // In development mode, allow writing societies for testing
      allow write: if isDevelopmentMode();
    }
  }
} 